package fr.tinouhd.hqxscaler;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.io.File;

final class ReScalerGUI
{
	public JPanel mainPanel;
	private JButton processButton;
	private JButton selectFileButton;
	private JTextField fileInput;
	private JLabel fileInputLabel;
	private JPanel buttonPanel;
	private JComboBox<Integer> sizeSelector;
	private JProgressBar progressBar;

	public ReScalerGUI()
	{
		sizeSelector.addItem(2);
		sizeSelector.addItem(3);
		sizeSelector.addItem(4);

		selectFileButton.addActionListener(e -> {
			JFileChooser fileChooser = new JFileChooser();
			FileFilter imagesFilter = new FileNameExtensionFilter("Images", "bmp", "gif", "jpg", "jpeg", "png");
			FileFilter videoFilter = new FileNameExtensionFilter("Video", "mp4");
			fileChooser.addChoosableFileFilter(imagesFilter);
			fileChooser.addChoosableFileFilter(videoFilter);

			int choice = fileChooser.showOpenDialog(null);

			if (choice != JFileChooser.APPROVE_OPTION)
				return;

			fileInput.setText(fileChooser.getSelectedFile().getAbsolutePath());
		});

		processButton.addActionListener(e -> {
			if (fileInput.getText().isEmpty() || fileInput.getText() == null || sizeSelector.getSelectedItem() == null || (int) sizeSelector.getSelectedItem() < 2 || (int) sizeSelector.getSelectedItem() > 4)
				return;
			File f = new File(fileInput.getText());
			int scale = (int) sizeSelector.getSelectedItem();
			if (!f.exists())
				return;

			Thread t = new Thread(() -> {
				processButton.setEnabled(false);
				GuiReScaler grs = new GuiReScaler(scale, progressBar);
				progressBar.setMinimum(0);
				if (f.isDirectory())
				{
					progressBar.setMaximum(f.listFiles(file -> file.getName().matches("^.*\\.(bmp|gif|jpg|jpeg|png|mp4)$")).length);
					for (File img : f.listFiles(file -> file.getName().matches("^.*\\.(bmp|gif|jpg|jpeg|png|mp4)$")))
					{
						grs.processFileAndSave(img);
						progressBar.setValue(progressBar.getValue() + 1);
					}
				} else
				{
					if (f.getName().matches("^.*\\.(bmp|gif|jpg|jpeg|png|mp4)$"))
					{
						grs.processFileAndSave(f);
					}
				}
				grs.close();
				JOptionPane.showMessageDialog(null, "All is done !", "HQx ReScaler", JOptionPane.INFORMATION_MESSAGE);
				processButton.setEnabled(true);
				progressBar.setValue(0);
			});
			t.start();
		});
	}

	{
		// GUI initializer generated by IntelliJ IDEA GUI Designer
		// >>> IMPORTANT!! <<<
		// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$()
	{
		mainPanel = new JPanel();
		mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(4, 1, new Insets(5, 5, 5, 5), -1, -1));
		buttonPanel = new JPanel();
		buttonPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
		mainPanel.add(buttonPanel, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
		processButton = new JButton();
		processButton.setText("Process");
		buttonPanel.add(processButton, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		selectFileButton = new JButton();
		selectFileButton.setText("Select file");
		buttonPanel.add(selectFileButton, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		sizeSelector = new JComboBox();
		buttonPanel.add(sizeSelector, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		fileInput = new JTextField();
		mainPanel.add(fileInput, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
		fileInputLabel = new JLabel();
		fileInputLabel.setText("Select image to process :");
		mainPanel.add(fileInputLabel, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
		progressBar = new JProgressBar();
		mainPanel.add(progressBar, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$()
	{
		return mainPanel;
	}
}
